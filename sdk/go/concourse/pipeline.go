// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package concourse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pipeline struct {
	pulumi.CustomResourceState

	IsExposed            pulumi.BoolOutput   `pulumi:"isExposed"`
	IsPaused             pulumi.BoolOutput   `pulumi:"isPaused"`
	Json                 pulumi.StringOutput `pulumi:"json"`
	PipelineConfig       pulumi.StringOutput `pulumi:"pipelineConfig"`
	PipelineConfigFormat pulumi.StringOutput `pulumi:"pipelineConfigFormat"`
	PipelineName         pulumi.StringOutput `pulumi:"pipelineName"`
	TeamName             pulumi.StringOutput `pulumi:"teamName"`
	Yaml                 pulumi.StringOutput `pulumi:"yaml"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsExposed == nil {
		return nil, errors.New("invalid value for required argument 'IsExposed'")
	}
	if args.IsPaused == nil {
		return nil, errors.New("invalid value for required argument 'IsPaused'")
	}
	if args.PipelineConfig == nil {
		return nil, errors.New("invalid value for required argument 'PipelineConfig'")
	}
	if args.PipelineConfigFormat == nil {
		return nil, errors.New("invalid value for required argument 'PipelineConfigFormat'")
	}
	if args.PipelineName == nil {
		return nil, errors.New("invalid value for required argument 'PipelineName'")
	}
	if args.TeamName == nil {
		return nil, errors.New("invalid value for required argument 'TeamName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("concourse:index/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("concourse:index/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	IsExposed            *bool   `pulumi:"isExposed"`
	IsPaused             *bool   `pulumi:"isPaused"`
	Json                 *string `pulumi:"json"`
	PipelineConfig       *string `pulumi:"pipelineConfig"`
	PipelineConfigFormat *string `pulumi:"pipelineConfigFormat"`
	PipelineName         *string `pulumi:"pipelineName"`
	TeamName             *string `pulumi:"teamName"`
	Yaml                 *string `pulumi:"yaml"`
}

type PipelineState struct {
	IsExposed            pulumi.BoolPtrInput
	IsPaused             pulumi.BoolPtrInput
	Json                 pulumi.StringPtrInput
	PipelineConfig       pulumi.StringPtrInput
	PipelineConfigFormat pulumi.StringPtrInput
	PipelineName         pulumi.StringPtrInput
	TeamName             pulumi.StringPtrInput
	Yaml                 pulumi.StringPtrInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	IsExposed            bool   `pulumi:"isExposed"`
	IsPaused             bool   `pulumi:"isPaused"`
	PipelineConfig       string `pulumi:"pipelineConfig"`
	PipelineConfigFormat string `pulumi:"pipelineConfigFormat"`
	PipelineName         string `pulumi:"pipelineName"`
	TeamName             string `pulumi:"teamName"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	IsExposed            pulumi.BoolInput
	IsPaused             pulumi.BoolInput
	PipelineConfig       pulumi.StringInput
	PipelineConfigFormat pulumi.StringInput
	PipelineName         pulumi.StringInput
	TeamName             pulumi.StringInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//          PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//          PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
