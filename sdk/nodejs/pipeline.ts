// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineState, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'concourse:index/pipeline:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    public readonly isExposed!: pulumi.Output<boolean>;
    public readonly isPaused!: pulumi.Output<boolean>;
    public /*out*/ readonly json!: pulumi.Output<string>;
    public readonly pipelineConfig!: pulumi.Output<string>;
    public readonly pipelineConfigFormat!: pulumi.Output<string>;
    public readonly pipelineName!: pulumi.Output<string>;
    public readonly teamName!: pulumi.Output<string>;
    public /*out*/ readonly yaml!: pulumi.Output<string>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineArgs | PipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineState | undefined;
            resourceInputs["isExposed"] = state ? state.isExposed : undefined;
            resourceInputs["isPaused"] = state ? state.isPaused : undefined;
            resourceInputs["json"] = state ? state.json : undefined;
            resourceInputs["pipelineConfig"] = state ? state.pipelineConfig : undefined;
            resourceInputs["pipelineConfigFormat"] = state ? state.pipelineConfigFormat : undefined;
            resourceInputs["pipelineName"] = state ? state.pipelineName : undefined;
            resourceInputs["teamName"] = state ? state.teamName : undefined;
            resourceInputs["yaml"] = state ? state.yaml : undefined;
        } else {
            const args = argsOrState as PipelineArgs | undefined;
            if ((!args || args.isExposed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isExposed'");
            }
            if ((!args || args.isPaused === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isPaused'");
            }
            if ((!args || args.pipelineConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineConfig'");
            }
            if ((!args || args.pipelineConfigFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineConfigFormat'");
            }
            if ((!args || args.pipelineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineName'");
            }
            if ((!args || args.teamName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamName'");
            }
            resourceInputs["isExposed"] = args ? args.isExposed : undefined;
            resourceInputs["isPaused"] = args ? args.isPaused : undefined;
            resourceInputs["pipelineConfig"] = args ? args.pipelineConfig : undefined;
            resourceInputs["pipelineConfigFormat"] = args ? args.pipelineConfigFormat : undefined;
            resourceInputs["pipelineName"] = args ? args.pipelineName : undefined;
            resourceInputs["teamName"] = args ? args.teamName : undefined;
            resourceInputs["json"] = undefined /*out*/;
            resourceInputs["yaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pipeline resources.
 */
export interface PipelineState {
    isExposed?: pulumi.Input<boolean>;
    isPaused?: pulumi.Input<boolean>;
    json?: pulumi.Input<string>;
    pipelineConfig?: pulumi.Input<string>;
    pipelineConfigFormat?: pulumi.Input<string>;
    pipelineName?: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    isExposed: pulumi.Input<boolean>;
    isPaused: pulumi.Input<boolean>;
    pipelineConfig: pulumi.Input<string>;
    pipelineConfigFormat: pulumi.Input<string>;
    pipelineName: pulumi.Input<string>;
    teamName: pulumi.Input<string>;
}
