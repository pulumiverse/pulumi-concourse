# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, id=None, members=None, owners=None, pipeline_operators=None, team_name=None, viewers=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if owners and not isinstance(owners, list):
            raise TypeError("Expected argument 'owners' to be a list")
        pulumi.set(__self__, "owners", owners)
        if pipeline_operators and not isinstance(pipeline_operators, list):
            raise TypeError("Expected argument 'pipeline_operators' to be a list")
        pulumi.set(__self__, "pipeline_operators", pipeline_operators)
        if team_name and not isinstance(team_name, str):
            raise TypeError("Expected argument 'team_name' to be a str")
        pulumi.set(__self__, "team_name", team_name)
        if viewers and not isinstance(viewers, list):
            raise TypeError("Expected argument 'viewers' to be a list")
        pulumi.set(__self__, "viewers", viewers)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def owners(self) -> Sequence[str]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="pipelineOperators")
    def pipeline_operators(self) -> Sequence[str]:
        return pulumi.get(self, "pipeline_operators")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> str:
        return pulumi.get(self, "team_name")

    @property
    @pulumi.getter
    def viewers(self) -> Sequence[str]:
        return pulumi.get(self, "viewers")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            id=self.id,
            members=self.members,
            owners=self.owners,
            pipeline_operators=self.pipeline_operators,
            team_name=self.team_name,
            viewers=self.viewers)


def get_team(team_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['teamName'] = team_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('concourse:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        id=__ret__.id,
        members=__ret__.members,
        owners=__ret__.owners,
        pipeline_operators=__ret__.pipeline_operators,
        team_name=__ret__.team_name,
        viewers=__ret__.viewers)


@_utilities.lift_output_func(get_team)
def get_team_output(team_name: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
