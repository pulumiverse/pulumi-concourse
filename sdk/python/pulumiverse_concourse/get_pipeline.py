# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPipelineResult',
    'AwaitableGetPipelineResult',
    'get_pipeline',
    'get_pipeline_output',
]

@pulumi.output_type
class GetPipelineResult:
    """
    A collection of values returned by getPipeline.
    """
    def __init__(__self__, id=None, is_exposed=None, is_paused=None, json=None, pipeline_name=None, team_name=None, yaml=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_exposed and not isinstance(is_exposed, bool):
            raise TypeError("Expected argument 'is_exposed' to be a bool")
        pulumi.set(__self__, "is_exposed", is_exposed)
        if is_paused and not isinstance(is_paused, bool):
            raise TypeError("Expected argument 'is_paused' to be a bool")
        pulumi.set(__self__, "is_paused", is_paused)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if pipeline_name and not isinstance(pipeline_name, str):
            raise TypeError("Expected argument 'pipeline_name' to be a str")
        pulumi.set(__self__, "pipeline_name", pipeline_name)
        if team_name and not isinstance(team_name, str):
            raise TypeError("Expected argument 'team_name' to be a str")
        pulumi.set(__self__, "team_name", team_name)
        if yaml and not isinstance(yaml, str):
            raise TypeError("Expected argument 'yaml' to be a str")
        pulumi.set(__self__, "yaml", yaml)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExposed")
    def is_exposed(self) -> bool:
        return pulumi.get(self, "is_exposed")

    @property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> bool:
        return pulumi.get(self, "is_paused")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> str:
        return pulumi.get(self, "pipeline_name")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> str:
        return pulumi.get(self, "team_name")

    @property
    @pulumi.getter
    def yaml(self) -> str:
        return pulumi.get(self, "yaml")


class AwaitableGetPipelineResult(GetPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineResult(
            id=self.id,
            is_exposed=self.is_exposed,
            is_paused=self.is_paused,
            json=self.json,
            pipeline_name=self.pipeline_name,
            team_name=self.team_name,
            yaml=self.yaml)


def get_pipeline(pipeline_name: Optional[str] = None,
                 team_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['pipelineName'] = pipeline_name
    __args__['teamName'] = team_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('concourse:index/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult).value

    return AwaitableGetPipelineResult(
        id=__ret__.id,
        is_exposed=__ret__.is_exposed,
        is_paused=__ret__.is_paused,
        json=__ret__.json,
        pipeline_name=__ret__.pipeline_name,
        team_name=__ret__.team_name,
        yaml=__ret__.yaml)


@_utilities.lift_output_func(get_pipeline)
def get_pipeline_output(pipeline_name: Optional[pulumi.Input[str]] = None,
                        team_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPipelineResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
