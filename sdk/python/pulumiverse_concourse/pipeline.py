# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PipelineArgs', 'Pipeline']

@pulumi.input_type
class PipelineArgs:
    def __init__(__self__, *,
                 is_exposed: pulumi.Input[bool],
                 is_paused: pulumi.Input[bool],
                 pipeline_config: pulumi.Input[str],
                 pipeline_config_format: pulumi.Input[str],
                 pipeline_name: pulumi.Input[str],
                 team_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Pipeline resource.
        """
        pulumi.set(__self__, "is_exposed", is_exposed)
        pulumi.set(__self__, "is_paused", is_paused)
        pulumi.set(__self__, "pipeline_config", pipeline_config)
        pulumi.set(__self__, "pipeline_config_format", pipeline_config_format)
        pulumi.set(__self__, "pipeline_name", pipeline_name)
        pulumi.set(__self__, "team_name", team_name)

    @property
    @pulumi.getter(name="isExposed")
    def is_exposed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_exposed")

    @is_exposed.setter
    def is_exposed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_exposed", value)

    @property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_paused")

    @is_paused.setter
    def is_paused(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_paused", value)

    @property
    @pulumi.getter(name="pipelineConfig")
    def pipeline_config(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pipeline_config")

    @pipeline_config.setter
    def pipeline_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_config", value)

    @property
    @pulumi.getter(name="pipelineConfigFormat")
    def pipeline_config_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pipeline_config_format")

    @pipeline_config_format.setter
    def pipeline_config_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_config_format", value)

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pipeline_name")

    @pipeline_name.setter
    def pipeline_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_name", value)

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "team_name")

    @team_name.setter
    def team_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_name", value)


@pulumi.input_type
class _PipelineState:
    def __init__(__self__, *,
                 is_exposed: Optional[pulumi.Input[bool]] = None,
                 is_paused: Optional[pulumi.Input[bool]] = None,
                 json: Optional[pulumi.Input[str]] = None,
                 pipeline_config: Optional[pulumi.Input[str]] = None,
                 pipeline_config_format: Optional[pulumi.Input[str]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 yaml: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Pipeline resources.
        """
        if is_exposed is not None:
            pulumi.set(__self__, "is_exposed", is_exposed)
        if is_paused is not None:
            pulumi.set(__self__, "is_paused", is_paused)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if pipeline_config is not None:
            pulumi.set(__self__, "pipeline_config", pipeline_config)
        if pipeline_config_format is not None:
            pulumi.set(__self__, "pipeline_config_format", pipeline_config_format)
        if pipeline_name is not None:
            pulumi.set(__self__, "pipeline_name", pipeline_name)
        if team_name is not None:
            pulumi.set(__self__, "team_name", team_name)
        if yaml is not None:
            pulumi.set(__self__, "yaml", yaml)

    @property
    @pulumi.getter(name="isExposed")
    def is_exposed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_exposed")

    @is_exposed.setter
    def is_exposed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_exposed", value)

    @property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_paused")

    @is_paused.setter
    def is_paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_paused", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="pipelineConfig")
    def pipeline_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline_config")

    @pipeline_config.setter
    def pipeline_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_config", value)

    @property
    @pulumi.getter(name="pipelineConfigFormat")
    def pipeline_config_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline_config_format")

    @pipeline_config_format.setter
    def pipeline_config_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_config_format", value)

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline_name")

    @pipeline_name.setter
    def pipeline_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_name", value)

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_name")

    @team_name.setter
    def team_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_name", value)

    @property
    @pulumi.getter
    def yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "yaml")

    @yaml.setter
    def yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "yaml", value)


class Pipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_exposed: Optional[pulumi.Input[bool]] = None,
                 is_paused: Optional[pulumi.Input[bool]] = None,
                 pipeline_config: Optional[pulumi.Input[str]] = None,
                 pipeline_config_format: Optional[pulumi.Input[str]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Pipeline resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_exposed: Optional[pulumi.Input[bool]] = None,
                 is_paused: Optional[pulumi.Input[bool]] = None,
                 pipeline_config: Optional[pulumi.Input[str]] = None,
                 pipeline_config_format: Optional[pulumi.Input[str]] = None,
                 pipeline_name: Optional[pulumi.Input[str]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineArgs.__new__(PipelineArgs)

            if is_exposed is None and not opts.urn:
                raise TypeError("Missing required property 'is_exposed'")
            __props__.__dict__["is_exposed"] = is_exposed
            if is_paused is None and not opts.urn:
                raise TypeError("Missing required property 'is_paused'")
            __props__.__dict__["is_paused"] = is_paused
            if pipeline_config is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_config'")
            __props__.__dict__["pipeline_config"] = pipeline_config
            if pipeline_config_format is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_config_format'")
            __props__.__dict__["pipeline_config_format"] = pipeline_config_format
            if pipeline_name is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_name'")
            __props__.__dict__["pipeline_name"] = pipeline_name
            if team_name is None and not opts.urn:
                raise TypeError("Missing required property 'team_name'")
            __props__.__dict__["team_name"] = team_name
            __props__.__dict__["json"] = None
            __props__.__dict__["yaml"] = None
        super(Pipeline, __self__).__init__(
            'concourse:index/pipeline:Pipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            is_exposed: Optional[pulumi.Input[bool]] = None,
            is_paused: Optional[pulumi.Input[bool]] = None,
            json: Optional[pulumi.Input[str]] = None,
            pipeline_config: Optional[pulumi.Input[str]] = None,
            pipeline_config_format: Optional[pulumi.Input[str]] = None,
            pipeline_name: Optional[pulumi.Input[str]] = None,
            team_name: Optional[pulumi.Input[str]] = None,
            yaml: Optional[pulumi.Input[str]] = None) -> 'Pipeline':
        """
        Get an existing Pipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineState.__new__(_PipelineState)

        __props__.__dict__["is_exposed"] = is_exposed
        __props__.__dict__["is_paused"] = is_paused
        __props__.__dict__["json"] = json
        __props__.__dict__["pipeline_config"] = pipeline_config
        __props__.__dict__["pipeline_config_format"] = pipeline_config_format
        __props__.__dict__["pipeline_name"] = pipeline_name
        __props__.__dict__["team_name"] = team_name
        __props__.__dict__["yaml"] = yaml
        return Pipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="isExposed")
    def is_exposed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_exposed")

    @property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_paused")

    @property
    @pulumi.getter
    def json(self) -> pulumi.Output[str]:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="pipelineConfig")
    def pipeline_config(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pipeline_config")

    @property
    @pulumi.getter(name="pipelineConfigFormat")
    def pipeline_config_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pipeline_config_format")

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pipeline_name")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "team_name")

    @property
    @pulumi.getter
    def yaml(self) -> pulumi.Output[str]:
        return pulumi.get(self, "yaml")

