# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 owners: pulumi.Input[Sequence[pulumi.Input[str]]],
                 team_name: pulumi.Input[str],
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pipeline_operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Team resource.
        """
        pulumi.set(__self__, "owners", owners)
        pulumi.set(__self__, "team_name", team_name)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if pipeline_operators is not None:
            pulumi.set(__self__, "pipeline_operators", pipeline_operators)
        if viewers is not None:
            pulumi.set(__self__, "viewers", viewers)

    @property
    @pulumi.getter
    def owners(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "owners")

    @owners.setter
    def owners(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "owners", value)

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "team_name")

    @team_name.setter
    def team_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_name", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="pipelineOperators")
    def pipeline_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pipeline_operators")

    @pipeline_operators.setter
    def pipeline_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pipeline_operators", value)

    @property
    @pulumi.getter
    def viewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "viewers")

    @viewers.setter
    def viewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "viewers", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pipeline_operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        """
        if members is not None:
            pulumi.set(__self__, "members", members)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if pipeline_operators is not None:
            pulumi.set(__self__, "pipeline_operators", pipeline_operators)
        if team_name is not None:
            pulumi.set(__self__, "team_name", team_name)
        if viewers is not None:
            pulumi.set(__self__, "viewers", viewers)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "owners")

    @owners.setter
    def owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "owners", value)

    @property
    @pulumi.getter(name="pipelineOperators")
    def pipeline_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pipeline_operators")

    @pipeline_operators.setter
    def pipeline_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pipeline_operators", value)

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_name")

    @team_name.setter
    def team_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_name", value)

    @property
    @pulumi.getter
    def viewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "viewers")

    @viewers.setter
    def viewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "viewers", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pipeline_operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Team resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Team resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pipeline_operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team_name: Optional[pulumi.Input[str]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["members"] = members
            if owners is None and not opts.urn:
                raise TypeError("Missing required property 'owners'")
            __props__.__dict__["owners"] = owners
            __props__.__dict__["pipeline_operators"] = pipeline_operators
            if team_name is None and not opts.urn:
                raise TypeError("Missing required property 'team_name'")
            __props__.__dict__["team_name"] = team_name
            __props__.__dict__["viewers"] = viewers
        super(Team, __self__).__init__(
            'concourse:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            pipeline_operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            team_name: Optional[pulumi.Input[str]] = None,
            viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["members"] = members
        __props__.__dict__["owners"] = owners
        __props__.__dict__["pipeline_operators"] = pipeline_operators
        __props__.__dict__["team_name"] = team_name
        __props__.__dict__["viewers"] = viewers
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def owners(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="pipelineOperators")
    def pipeline_operators(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "pipeline_operators")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "team_name")

    @property
    @pulumi.getter
    def viewers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "viewers")

